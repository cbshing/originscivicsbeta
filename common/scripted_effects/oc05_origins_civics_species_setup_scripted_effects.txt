# Origins Civics Species Setup Scripted Effects
# by cbshing
#	Example:
#
#	example_effect = { 
#		add_energy = -100
#	}
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}

# ########################
# # Species Effects #
# ########################

### Planet Preference ###
# change species planet preference to habitat
# input is event_target:species_to_modify
# Scope: Country
make_species_habitat_preference = {
	every_owned_pop = {
		limit = { 
			is_exact_same_species_as = event_target:species_to_modify 
			NOR = { 
				has_trait = trait_robotic_1 
				has_trait = trait_robotic_2 
				has_trait = trait_robotic_3
				has_trait = trait_machine_unit 
			}
		}
		modify_species = {
			species = this
			ideal_planet_class = pc_habitat
			base = none # makes this replace parent species
		}
	}
}

# change species planet preference to gaia
# input is event_target:species_to_modify
# Scope: Country
make_species_gaia_preference = {
	every_owned_pop = {
		limit = { 
			is_exact_same_species_as = event_target:species_to_modify 
			NOR = { 
				has_trait = trait_robotic_1 
				has_trait = trait_robotic_2 
				has_trait = trait_robotic_3
				has_trait = trait_machine_unit 
			}
		}
		modify_species = {
			species = this
			ideal_planet_class = pc_gaia
			base = none # makes this replace parent species
		}
	}
}

# change species planet preference to nuked
# input is event_target:species_to_modify
# Scope: Country
make_species_nuked_preference = {
	every_owned_pop = {
		limit = { 
			is_exact_same_species_as = event_target:species_to_modify
			NOR = { 
				has_trait = trait_robotic_1 
				has_trait = trait_robotic_2 
				has_trait = trait_robotic_3
				has_trait = trait_machine_unit 
			}			
		}
		modify_species = {
			species = this
			ideal_planet_class = pc_nuked
			base = none # makes this replace parent species
		}
	}
}

# change species planet preference to continental
# input is event_target:species_to_modify
# Scope: Country
make_species_continental_preference = {
	every_owned_pop = {
		limit = { 
			is_exact_same_species_as = event_target:species_to_modify
			NOR = { 
				has_trait = trait_robotic_1 
				has_trait = trait_robotic_2 
				has_trait = trait_robotic_3
				has_trait = trait_machine_unit 
			}			
		}
		modify_species = {
			species = this
			ideal_planet_class = pc_continental
			base = none # makes this replace parent species
		}
	}
}

# change species planet preference to ringworld
# input is event_target:species_to_modify
# Scope: Country
make_species_ringworld_preference = {
	every_owned_pop = {
		limit = { 
			is_exact_same_species_as = event_target:species_to_modify
			NOR = { 
				has_trait = trait_robotic_1 
				has_trait = trait_robotic_2 
				has_trait = trait_robotic_3
				has_trait = trait_machine_unit 
			}			
		}
		modify_species = {
			species = this
			ideal_planet_class = pc_ringworld_habitable
			base = none # makes this replace parent species
		}
	}
}

### New Traits ###

### Change Homeworld ###
# change species homeworld to current capital
# input is event_target:species_to_modify
# Scope: Country
set_capital_as_homeworld = {
	random_owned_planet = {
		limit = { is_capital = yes }
		this = { save_event_target_as = new_capital_homeworld }
	}
	random_owned_pop = {
		limit = { 
			is_exact_same_species_as = event_target:species_to_modify
			NOR = { 
				has_trait = trait_robotic_1 
				has_trait = trait_robotic_2 
				has_trait = trait_robotic_3
				has_trait = trait_machine_unit 
			}			
		}
		species = { 
			set_species_homeworld = event_target:new_capital_homeworld
		}
	}
}

# change species homeworld to specific planet
# input is event_target:new_homeworld
# input is event_target:species_to_modify
# Scope: Country
set_new_planet_as_homeworld = {
	random_owned_pop = {
		limit = { 
			is_exact_same_species_as = event_target:species_to_modify
			NOR = { 
				has_trait = trait_robotic_1 
				has_trait = trait_robotic_2 
				has_trait = trait_robotic_3
				has_trait = trait_machine_unit 
			}			
		}
		species = { 
			set_species_homeworld = event_target:new_homeworld
		}
	}
}

# change species homeworld to specific planet
# input is event_target:new_homeworld
# input is event_target:species_to_modify
# Scope: Country
make_same_species_as_earth = {
	#find Earth
	random_system = {
		limit = { has_star_flag = sol }
		#check for planet_earth flag
		if = { 
			limit = { any_planet = { has_planet_flag = planet_earth } } 
			random_system_planet = {
				limit = {
					has_planet_flag = planet_earth
				}
				save_event_target_as = earth_home
				if = { limit = { has_owner = yes } 
					prevprev = { set_country_flag = earth_is_owned }
					owner = { 
						set_country_flag = earth_owner
						set_country_flag = oc_home_empire
						owner_species = { save_event_target_as = earth_owner }
					}
				}
			}
		}
		#for CoM Earth, Tomb Earth or other Earths without planet_flag
		else = {
			random_system_planet = {
				limit = {
					OR = {
						is_colonizable = yes
						is_homeworld = yes
					}
					is_asteroid = no
					is_star = no
				}
				save_event_target_as = earth_home
				if = { limit = { has_owner = yes } 
					prevprev = { set_country_flag = earth_is_owned }
					owner = { 
						set_country_flag = earth_owner
						set_country_flag = oc_home_empire
						owner_species = { save_event_target_as = earth_owner }
					}
				}
			}
		}
	}
	random_owned_pop = {
		limit = { 
			is_exact_same_species_as = event_target:species_to_modify
			NOR = { 
				has_trait = trait_robotic_1 
				has_trait = trait_robotic_2 
				has_trait = trait_robotic_3
				has_trait = trait_machine_unit 
			}			
		}
		species = {
			set_species_homeworld = event_target:earth_home				
			if = { limit = { prevprev = { has_country_flag = earth_is_owned } }
				prevprev = { remove_country_flag = earth_is_owned  }
				set_species_identity = event_target:earth_owner
			}
			save_event_target_as = earth_colony_species
		}
	}
	every_owned_pop = {
		limit = { is_same_species = event_target:species_to_modify }
		change_species = event_target:earth_colony_species
	}
	every_owned_leader = {
		limit = { is_same_species = event_target:species_to_modify }
		change_species = event_target:earth_colony_species
	}
	every_pool_leader = {
		limit = { is_same_species = event_target:species_to_modify }
		change_species = event_target:earth_colony_species
	}
}